
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.text.ParseException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\007" +
    "\000\002\004\011\000\002\004\007\000\002\004\011\000" +
    "\002\004\014\000\002\004\007\000\002\004\006\000\002" +
    "\004\004\000\002\017\002\000\002\006\003\000\002\006" +
    "\003\000\002\006\002\000\002\007\003\000\002\007\002" +
    "\000\002\010\003\000\002\010\002\000\002\016\004\000" +
    "\002\016\003\000\002\003\004\000\002\003\007\000\002" +
    "\003\006\000\002\003\011\000\002\003\005\000\002\003" +
    "\010\000\002\003\007\000\002\003\012\000\002\013\003" +
    "\000\002\013\005\000\002\014\003\000\002\014\005\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\005\004\000\002\005\005\000\002\005\006\000\002" +
    "\025\003\000\002\025\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\024\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\046\004\031\007\016\014\015\016\012\017" +
    "\020\020\032\021\027\025\007\026\022\027\010\030\030" +
    "\031\021\032\034\033\006\035\004\053\026\054\011\056" +
    "\025\001\002\000\024\007\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\033\uffbb\035\uffbb\053\uffbb\054\uffbb\056\uffbb\001\002\000" +
    "\024\007\016\030\030\031\021\032\034\033\006\035\004" +
    "\053\026\054\011\056\025\001\002\000\052\005\uffda\006" +
    "\uffda\010\uffda\011\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\175\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\047\uffda\050\uffda\053\uffda\054\uffda\055\uffda\001\002" +
    "\000\006\010\uffde\033\uffde\001\002\000\006\010\uffdd\033" +
    "\uffdd\001\002\000\024\007\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\035\uffbd\053\uffbd\054\uffbd\056\uffbd\001\002\000" +
    "\004\007\171\001\002\000\004\033\161\001\002\000\044" +
    "\006\160\034\070\035\045\036\057\037\066\040\067\041" +
    "\046\042\055\043\060\044\064\045\050\046\061\047\062" +
    "\050\051\053\063\054\052\055\054\001\002\000\004\007" +
    "\152\001\002\000\032\007\016\025\007\026\022\027\010" +
    "\030\030\031\021\032\034\033\006\035\004\053\026\054" +
    "\011\056\025\001\002\000\006\006\144\011\104\001\002" +
    "\000\046\004\031\007\016\014\015\016\012\017\020\020" +
    "\032\021\027\025\007\026\022\027\010\030\030\031\021" +
    "\032\034\033\006\035\004\053\026\054\011\056\025\001" +
    "\002\000\052\005\uffcb\006\uffcb\010\uffcb\011\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\053\uffcb" +
    "\054\uffcb\055\uffcb\001\002\000\006\010\uffdc\033\uffdc\001" +
    "\002\000\050\002\135\004\031\007\016\014\015\016\012" +
    "\017\020\020\032\021\027\025\007\026\022\027\010\030" +
    "\030\031\021\032\034\033\006\035\004\053\026\054\011" +
    "\056\025\001\002\000\052\002\001\004\001\005\001\007" +
    "\001\014\001\016\001\017\001\020\001\021\001\025\001" +
    "\026\001\027\001\030\001\031\001\032\001\033\001\035" +
    "\001\053\001\054\001\056\001\001\002\000\024\007\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\035\uffbc\053\uffbc\054" +
    "\uffbc\056\uffbc\001\002\000\024\007\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\033\uffbe\035\uffbe\053\uffbe\054\uffbe\056\uffbe\001" +
    "\002\000\004\007\131\001\002\000\052\005\uffcc\006\uffcc" +
    "\010\uffcc\011\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\053\uffcc\054\uffcc\055\uffcc\001\002\000" +
    "\050\004\ufff4\005\124\007\ufff4\014\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\035\ufff4\053\ufff4\054\ufff4\056\ufff4" +
    "\001\002\000\004\007\ufff4\001\002\000\052\005\uffdb\006" +
    "\uffdb\010\uffdb\011\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046" +
    "\uffdb\047\uffdb\050\uffdb\053\uffdb\054\uffdb\055\uffdb\001\002" +
    "\000\052\005\uffca\006\uffca\010\uffca\011\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\053\uffca\054" +
    "\uffca\055\uffca\001\002\000\004\007\036\001\002\000\034" +
    "\006\ufff1\007\016\025\007\026\022\027\010\030\030\031" +
    "\021\032\034\033\006\035\004\053\026\054\011\056\025" +
    "\001\002\000\044\006\ufff2\034\070\035\045\036\057\037" +
    "\066\040\067\041\046\042\055\043\060\044\064\045\050" +
    "\046\061\047\062\050\051\053\063\054\052\055\054\001" +
    "\002\000\006\006\ufff3\011\104\001\002\000\004\006\042" +
    "\001\002\000\026\006\uffef\007\016\030\030\031\021\032" +
    "\034\033\006\035\004\053\026\054\011\056\025\001\002" +
    "\000\004\006\077\001\002\000\044\006\ufff0\034\070\035" +
    "\045\036\057\037\066\040\067\041\046\042\055\043\060" +
    "\044\064\045\050\046\061\047\062\050\051\053\063\054" +
    "\052\055\054\001\002\000\024\007\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\035\uffc2\053\uffc2\054\uffc2\056\uffc2\001" +
    "\002\000\024\007\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\035\uffc7\053\uffc7\054\uffc7\056\uffc7\001\002\000\024\007" +
    "\016\030\030\031\021\032\034\033\006\035\004\053\026" +
    "\054\011\056\025\001\002\000\024\007\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\035\uffc9\053\uffc9\054\uffc9\056\uffc9" +
    "\001\002\000\024\007\016\030\030\031\021\032\034\033" +
    "\006\035\004\053\026\054\011\056\025\001\002\000\052" +
    "\005\uffb9\006\uffb9\010\uffb9\011\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\053\uffb9\054\uffb9\055" +
    "\uffb9\001\002\000\024\007\016\030\030\031\021\032\034" +
    "\033\006\035\004\053\026\054\011\056\025\001\002\000" +
    "\024\007\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\035\uffbf" +
    "\053\uffbf\054\uffbf\056\uffbf\001\002\000\024\007\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\035\uffc6\053\uffc6\054\uffc6" +
    "\056\uffc6\001\002\000\024\007\016\030\030\031\021\032" +
    "\034\033\006\035\004\053\026\054\011\056\025\001\002" +
    "\000\024\007\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\035" +
    "\uffc1\053\uffc1\054\uffc1\056\uffc1\001\002\000\024\007\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\035\uffc5\053\uffc5\054" +
    "\uffc5\056\uffc5\001\002\000\024\007\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\035\uffc8\053\uffc8\054\uffc8\056\uffc8\001" +
    "\002\000\024\007\016\030\030\031\021\032\034\033\006" +
    "\035\004\053\026\054\011\056\025\001\002\000\052\005" +
    "\uffba\006\uffba\010\uffba\011\uffba\034\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045" +
    "\uffba\046\uffba\047\uffba\050\uffba\053\uffba\054\uffba\055\uffba" +
    "\001\002\000\024\007\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\035\uffc4\053\uffc4\054\uffc4\056\uffc4\001\002\000\052" +
    "\005\uffd1\006\uffd1\010\uffd1\011\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\050\uffd1\053\uffd1\054\uffd1\055" +
    "\uffd1\001\002\000\024\007\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\035\uffc0\053\uffc0\054\uffc0\056\uffc0\001\002\000" +
    "\024\007\016\030\030\031\021\032\034\033\006\035\004" +
    "\053\026\054\011\056\025\001\002\000\024\007\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\035\uffc3\053\uffc3\054\uffc3" +
    "\056\uffc3\001\002\000\052\005\uffd9\006\uffd9\010\uffd9\011" +
    "\uffd9\034\070\035\045\036\057\037\066\040\067\041\046" +
    "\042\055\043\060\044\064\045\050\046\061\047\062\050" +
    "\051\053\063\054\052\055\054\001\002\000\052\005\uffd6" +
    "\006\uffd6\010\uffd6\011\uffd6\034\070\035\045\036\057\037" +
    "\066\040\uffd6\041\046\042\055\043\060\044\064\045\050" +
    "\046\061\047\uffd6\050\uffd6\053\063\054\052\055\054\001" +
    "\002\000\052\005\uffd4\006\uffd4\010\uffd4\011\uffd4\034\uffd4" +
    "\035\uffd4\036\057\037\066\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\053\063" +
    "\054\052\055\054\001\002\000\052\005\uffd3\006\uffd3\010" +
    "\uffd3\011\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\053\063\054\052\055\uffd3\001\002\000\052" +
    "\005\uffd7\006\uffd7\010\uffd7\011\uffd7\034\070\035\045\036" +
    "\057\037\066\040\uffd7\041\046\042\055\043\060\044\064" +
    "\045\050\046\061\047\062\050\uffd7\053\063\054\052\055" +
    "\054\001\002\000\052\005\uffd5\006\uffd5\010\uffd5\011\uffd5" +
    "\034\070\035\045\036\057\037\066\040\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\053\063\054\052\055\054\001\002\000\026\007\016\010" +
    "\uffed\030\030\031\021\032\034\033\006\035\004\053\026" +
    "\054\011\056\025\001\002\000\044\010\uffee\034\070\035" +
    "\045\036\057\037\066\040\067\041\046\042\055\043\060" +
    "\044\064\045\050\046\061\047\062\050\051\053\063\054" +
    "\052\055\054\001\002\000\004\010\102\001\002\000\046" +
    "\004\031\007\016\014\015\016\012\017\020\020\032\021" +
    "\027\025\007\026\022\027\010\030\030\031\021\032\034" +
    "\033\006\035\004\053\026\054\011\056\025\001\002\000" +
    "\054\002\ufff8\004\ufff8\005\ufff8\007\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\021\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\035\ufff8\053\ufff8" +
    "\054\ufff8\056\ufff8\001\002\000\004\033\105\001\002\000" +
    "\012\006\uffe6\011\uffe6\012\106\040\107\001\002\000\004" +
    "\030\111\001\002\000\024\007\016\030\030\031\021\032" +
    "\034\033\006\035\004\053\026\054\011\056\025\001\002" +
    "\000\046\006\uffe4\011\uffe4\034\070\035\045\036\057\037" +
    "\066\040\067\041\046\042\055\043\060\044\064\045\050" +
    "\046\061\047\062\050\051\053\063\054\052\055\054\001" +
    "\002\000\004\013\112\001\002\000\010\006\uffe5\011\uffe5" +
    "\040\113\001\002\000\006\004\116\033\115\001\002\000" +
    "\006\006\uffe3\011\uffe3\001\002\000\006\006\uffe2\011\uffe2" +
    "\001\002\000\024\007\016\030\030\031\021\032\034\033" +
    "\006\035\004\053\026\054\011\056\025\001\002\000\006" +
    "\005\122\011\121\001\002\000\046\005\uffe0\011\uffe0\034" +
    "\070\035\045\036\057\037\066\040\067\041\046\042\055" +
    "\043\060\044\064\045\050\046\061\047\062\050\051\053" +
    "\063\054\052\055\054\001\002\000\024\007\016\030\030" +
    "\031\021\032\034\033\006\035\004\053\026\054\011\056" +
    "\025\001\002\000\006\006\uffe1\011\uffe1\001\002\000\046" +
    "\005\uffdf\011\uffdf\034\070\035\045\036\057\037\066\040" +
    "\067\041\046\042\055\043\060\044\064\045\050\046\061" +
    "\047\062\050\051\053\063\054\052\055\054\001\002\000" +
    "\054\002\ufff5\004\ufff5\005\ufff5\007\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\017\ufff5\020\ufff5\021\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\035\ufff5\053\ufff5" +
    "\054\ufff5\056\ufff5\001\002\000\046\004\031\007\016\014" +
    "\015\016\012\017\020\020\032\021\027\025\007\026\022" +
    "\027\010\030\030\031\021\032\034\033\006\035\004\053" +
    "\026\054\011\056\025\001\002\000\050\004\031\005\130" +
    "\007\016\014\015\016\012\017\020\020\032\021\027\025" +
    "\007\026\022\027\010\030\030\031\021\032\034\033\006" +
    "\035\004\053\026\054\011\056\025\001\002\000\052\002" +
    "\uffff\004\uffff\005\uffff\007\uffff\014\uffff\016\uffff\017\uffff" +
    "\020\uffff\021\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031" +
    "\uffff\032\uffff\033\uffff\035\uffff\053\uffff\054\uffff\056\uffff" +
    "\001\002\000\054\002\ufff6\004\ufff6\005\ufff6\007\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\035" +
    "\ufff6\053\ufff6\054\ufff6\056\ufff6\001\002\000\024\007\016" +
    "\030\030\031\021\032\034\033\006\035\004\053\026\054" +
    "\011\056\025\001\002\000\044\010\133\034\070\035\045" +
    "\036\057\037\066\040\067\041\046\042\055\043\060\044" +
    "\064\045\050\046\061\047\062\050\051\053\063\054\052" +
    "\055\054\001\002\000\004\006\134\001\002\000\054\002" +
    "\ufff7\004\ufff7\005\ufff7\007\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\025\ufff7\026\ufff7\027\ufff7\030" +
    "\ufff7\031\ufff7\032\ufff7\033\ufff7\035\ufff7\053\ufff7\054\ufff7" +
    "\056\ufff7\001\002\000\004\002\000\001\002\000\004\016" +
    "\137\001\002\000\004\007\140\001\002\000\024\007\016" +
    "\030\030\031\021\032\034\033\006\035\004\053\026\054" +
    "\011\056\025\001\002\000\044\010\142\034\070\035\045" +
    "\036\057\037\066\040\067\041\046\042\055\043\060\044" +
    "\064\045\050\046\061\047\062\050\051\053\063\054\052" +
    "\055\054\001\002\000\004\006\143\001\002\000\054\002" +
    "\ufff9\004\ufff9\005\ufff9\007\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\025\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\035\ufff9\053\ufff9\054\ufff9" +
    "\056\ufff9\001\002\000\054\002\ufffe\004\ufffe\005\ufffe\007" +
    "\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe" +
    "\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\035\ufffe\053\ufffe\054\ufffe\056\ufffe\001\002\000\004" +
    "\010\150\001\002\000\044\010\147\034\070\035\045\036" +
    "\057\037\066\040\067\041\046\042\055\043\060\044\064" +
    "\045\050\046\061\047\062\050\051\053\063\054\052\055" +
    "\054\001\002\000\052\005\uffd0\006\uffd0\010\uffd0\011\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0" +
    "\053\uffd0\054\uffd0\055\uffd0\001\002\000\024\007\016\030" +
    "\030\031\021\032\034\033\006\035\004\053\026\054\011" +
    "\056\025\001\002\000\052\005\uffcf\006\uffcf\010\uffcf\011" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\053\063\054\052\055\uffcf\001\002\000\024\007\016" +
    "\030\030\031\021\032\034\033\006\035\004\053\026\054" +
    "\011\056\025\001\002\000\044\010\154\034\070\035\045" +
    "\036\057\037\066\040\067\041\046\042\055\043\060\044" +
    "\064\045\050\046\061\047\062\050\051\053\063\054\052" +
    "\055\054\001\002\000\046\004\031\007\016\014\015\016" +
    "\012\017\020\020\032\021\027\025\007\026\022\027\010" +
    "\030\030\031\021\032\034\033\006\035\004\053\026\054" +
    "\011\056\025\001\002\000\054\002\ufffc\004\ufffc\005\ufffc" +
    "\007\ufffc\014\ufffc\015\156\016\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc" +
    "\033\ufffc\035\ufffc\053\ufffc\054\ufffc\056\ufffc\001\002\000" +
    "\046\004\031\007\016\014\015\016\012\017\020\020\032" +
    "\021\027\025\007\026\022\027\010\030\030\031\021\032" +
    "\034\033\006\035\004\053\026\054\011\056\025\001\002" +
    "\000\054\002\ufffb\004\ufffb\005\ufffb\007\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\025\ufffb\026\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\035\ufffb\053" +
    "\ufffb\054\ufffb\056\ufffb\001\002\000\054\002\ufffd\004\ufffd" +
    "\005\ufffd\007\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\033\ufffd\035\ufffd\053\ufffd\054\ufffd\056\ufffd\001" +
    "\002\000\012\006\uffea\011\uffea\012\162\040\163\001\002" +
    "\000\004\030\165\001\002\000\024\007\016\030\030\031" +
    "\021\032\034\033\006\035\004\053\026\054\011\056\025" +
    "\001\002\000\046\006\uffe8\011\uffe8\034\070\035\045\036" +
    "\057\037\066\040\067\041\046\042\055\043\060\044\064" +
    "\045\050\046\061\047\062\050\051\053\063\054\052\055" +
    "\054\001\002\000\004\013\166\001\002\000\010\006\uffe9" +
    "\011\uffe9\040\167\001\002\000\006\004\116\033\115\001" +
    "\002\000\006\006\uffe7\011\uffe7\001\002\000\024\007\016" +
    "\030\030\031\021\032\034\033\006\035\004\053\026\054" +
    "\011\056\025\001\002\000\044\010\173\034\070\035\045" +
    "\036\057\037\066\040\067\041\046\042\055\043\060\044" +
    "\064\045\050\046\061\047\062\050\051\053\063\054\052" +
    "\055\054\001\002\000\046\004\031\007\016\014\015\016" +
    "\012\017\020\020\032\021\027\025\007\026\022\027\010" +
    "\030\030\031\021\032\034\033\006\035\004\053\026\054" +
    "\011\056\025\001\002\000\054\002\ufffa\004\ufffa\005\ufffa" +
    "\007\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa" +
    "\033\ufffa\035\ufffa\053\ufffa\054\ufffa\056\ufffa\001\002\000" +
    "\024\007\016\030\030\031\021\032\034\033\006\035\004" +
    "\053\026\054\011\056\025\001\002\000\052\005\uffd8\006" +
    "\uffd8\010\uffd8\011\uffd8\034\070\035\045\036\057\037\066" +
    "\040\067\041\046\042\055\043\060\044\064\045\050\046" +
    "\061\047\062\050\051\053\063\054\052\055\054\001\002" +
    "\000\046\005\uffd2\006\uffd2\010\uffd2\011\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\055\uffd2\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\020\002\022\003\016\004\023\005\013\021" +
    "\004\026\012\027\032\001\001\000\002\001\001\000\010" +
    "\005\176\021\004\027\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\046\022\055\023" +
    "\052\024\064\001\001\000\002\001\001\000\012\005\145" +
    "\021\004\026\144\027\032\001\001\000\002\001\001\000" +
    "\016\003\016\004\135\005\013\021\004\026\012\027\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\016\004\126\005\013\021\004\026\012\027\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\124\001\001" +
    "\000\004\017\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\037\005\036\006\040" +
    "\021\004\026\012\027\032\001\001\000\012\020\046\022" +
    "\055\023\052\024\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\043\007\042\021\004\027\032\001" +
    "\001\000\002\001\001\000\012\020\046\022\055\023\052" +
    "\024\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\075\021\004\027\032\001\001\000\002\001\001" +
    "\000\010\005\074\021\004\027\032\001\001\000\002\001" +
    "\001\000\010\005\073\021\004\027\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\072\021\004\027" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\071\021\004\027\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\070\021\004\027\032\001\001\000" +
    "\002\001\001\000\012\020\046\022\055\023\052\024\064" +
    "\001\001\000\012\020\046\022\055\023\052\024\064\001" +
    "\001\000\012\020\046\022\055\023\052\024\064\001\001" +
    "\000\012\020\046\022\055\023\052\024\064\001\001\000" +
    "\012\020\046\022\055\023\052\024\064\001\001\000\012" +
    "\020\046\022\055\023\052\024\064\001\001\000\012\005" +
    "\077\010\100\021\004\027\032\001\001\000\012\020\046" +
    "\022\055\023\052\024\064\001\001\000\002\001\001\000" +
    "\016\003\016\004\102\005\013\021\004\026\012\027\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\107\021\004\027\032" +
    "\001\001\000\012\020\046\022\055\023\052\024\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\117\014\116\021\004\027\032\001\001\000\002\001\001" +
    "\000\012\020\046\022\055\023\052\024\064\001\001\000" +
    "\010\005\122\021\004\027\032\001\001\000\002\001\001" +
    "\000\012\020\046\022\055\023\052\024\064\001\001\000" +
    "\002\001\001\000\020\002\125\003\016\004\023\005\013" +
    "\021\004\026\012\027\032\001\001\000\016\003\016\004" +
    "\126\005\013\021\004\026\012\027\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\131\021\004\027" +
    "\032\001\001\000\012\020\046\022\055\023\052\024\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\140" +
    "\021\004\027\032\001\001\000\012\020\046\022\055\023" +
    "\052\024\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\046\022" +
    "\055\023\052\024\064\001\001\000\002\001\001\000\010" +
    "\005\150\021\004\027\032\001\001\000\012\020\046\022" +
    "\055\023\052\024\064\001\001\000\010\005\152\021\004" +
    "\027\032\001\001\000\012\020\046\022\055\023\052\024" +
    "\064\001\001\000\016\003\016\004\154\005\013\021\004" +
    "\026\012\027\032\001\001\000\002\001\001\000\016\003" +
    "\016\004\156\005\013\021\004\026\012\027\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\163\021\004\027\032\001\001" +
    "\000\012\020\046\022\055\023\052\024\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\167\001\001" +
    "\000\002\001\001\000\010\005\171\021\004\027\032\001" +
    "\001\000\012\020\046\022\055\023\052\024\064\001\001" +
    "\000\016\003\016\004\173\005\013\021\004\026\012\027" +
    "\032\001\001\000\002\001\001\000\010\005\175\021\004" +
    "\027\032\001\001\000\012\020\046\022\055\023\052\024" +
    "\064\001\001\000\012\020\046\022\055\023\052\024\064" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    action_obj.tabla = new TablaSimbolos();
    action_obj.bloqueActual = 0; // Bloque en el que me encuentro
    action_obj.cBloque = 0; // Contador de bloques

    }


    public static void main(String[] args) throws Exception {
        PLXC.out.println("  error;");
        PLXC.out.println("  halt;");
    }
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) {
        System.err.println("Syntax Error. Línea: " + PLXC.lex.getLine() + " Columna: " + PLXC.lex.getColumn());
        PLXC.out.println("# Syntax Error");
        PLXC.out.println("error;");
        PLXC.out.println("halt;");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    TablaSimbolos tabla =new TablaSimbolos();
    int bloqueActual=0;
    int cBloque = 0;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Lista_de_sent ::= Sentencia 
            {
              Bloque RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Bloque b=new Bloque(PLXC.lex.getLine());
                        b.add(s);
                        RESULT=b;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Lista_de_sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_de_sent ::= Lista_de_sent Sentencia 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        l.add(s);
                        RESULT=l;    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Sentencia ::= List_declar_var PCOMA 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Sentencia ::= Expresion PCOMA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Sentencia ::= IF AP Expresion CP Sentencia 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion sT = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentIF(PLXC.lex.getLine(),c,sT,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Sentencia ::= IF AP Expresion CP Sentencia ELSE Sentencia 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion sT = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion sF = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentIF(PLXC.lex.getLine(),c,sT,sF);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sentencia ::= WHILE AP Expresion CP Sentencia 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentWHILE(PLXC.lex.getLine(),c,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentencia ::= DO Sentencia WHILE AP Expresion CP PCOMA 
            {
              Instruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new SentDOWHILE(PLXC.lex.getLine(),c,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentencia ::= FOR Inicio_bloque AP Inicio_forc PCOMA Cond_forc PCOMA Act_forc CP Sentencia 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    //tabla.borrarBloque(bloqueActual);
                    bloqueActual=b;
                    RESULT = new SentFORC(PLXC.lex.getLine(),c,a,s);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= PRINT AP Expresion CP PCOMA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new LlamadaMetodo(PLXC.lex.getLine(),e,Metodos.IMPRIMIR,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencia ::= A_LLAVE Inicio_bloque Lista_de_sent C_LLAVE 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        //hay que eliminar las variables de ese bloque, de la tabla, y volver al bloque anterior
                        //tabla.borrarBloque(bloqueActual);
                        bloqueActual = b; //con esto vuelvo al bloque anterior
                        RESULT=l;
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sentencia ::= A_LLAVE C_LLAVE 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Inicio_bloque ::= 
            {
              Integer RESULT =null;
		 
                        RESULT = bloqueActual; //Guardo el bloque en el que estaba
                        cBloque++;
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio_bloque",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Inicio_forc ::= List_declar_var 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio_forc",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Inicio_forc ::= Expresion 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio_forc",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Inicio_forc ::= 
            {
              Instruccion RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio_forc",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Cond_forc ::= Expresion 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cond_forc",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Cond_forc ::= 
            {
              Instruccion RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cond_forc",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Act_forc ::= Expresion 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Act_forc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Act_forc ::= 
            {
              Instruccion RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Act_forc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Else_if ::= ELSE Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Else_if ::= PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // List_declar_var ::= ExpTipo IDENT 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            tabla.declararVariable(PLXC.lex.getLine(), i, bloqueActual, true, t);
                            RESULT = new ListaVar(PLXC.lex.getLine(), t);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // List_declar_var ::= ExpTipo IDENT AC ENTERO CC 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // List_declar_var ::= ExpTipo IDENT ASIGNA Expresion 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                            Variable v = tabla.declararVariable(PLXC.lex.getLine(),i, bloqueActual, true, t);
                            ListaVar l = new ListaVar(PLXC.lex.getLine(), t);
                            l.add(new LlamadaMetodo(PLXC.lex.getLine(),
                                        new ExpVariable(PLXC.lex.getLine(), v),
                                        Metodos.CONSTRUCTORCOPIA,
                                        new Instruccion []{e}));

                            RESULT=l;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // List_declar_var ::= ExpTipo IDENT AC ENTERO CC ASIGNA Array 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // List_declar_var ::= List_declar_var COMA IDENT 
            {
              ListaVar RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tabla.declararVariable(PLXC.lex.getLine(),i,bloqueActual,true,l.getTipo());
                            RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // List_declar_var ::= List_declar_var COMA IDENT AC ENTERO CC 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ListaVar t = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // List_declar_var ::= List_declar_var COMA IDENT ASIGNA Expresion 
            {
              ListaVar RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Variable v = tabla.declararVariable(PLXC.lex.getLine(),i, bloqueActual, true, l.getTipo());
                        l.add(new LlamadaMetodo(PLXC.lex.getLine(),
                                        new ExpVariable(PLXC.lex.getLine(), v),
                                        Metodos.CONSTRUCTORCOPIA,
                                        new Instruccion []{e}));
                        RESULT=l;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // List_declar_var ::= List_declar_var COMA IDENT AC ENTERO CC ASIGNA Array 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ListaVar t = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Array ::= IDENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Array",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Array ::= A_LLAVE Lista_exp C_LLAVE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Array",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Lista_exp ::= Expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Lista_exp ::= Lista_exp COMA Expresion 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExpTipo ::= INT 
            {
              Tipo RESULT =null;
		RESULT = TipoInt.instancia;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpTipo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExpTipo ::= CHAR 
            {
              Tipo RESULT =null;
		RESULT = TipoChar.instancia;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpTipo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ExpTipo ::= FLOAT 
            {
              Tipo RESULT =null;
		RESULT = TipoReal.instancia;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpTipo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expresion ::= Literal 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpLiteral(PLXC.lex.getLine(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expresion ::= IDENT 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Objeto o = tabla.buscarObjeto(i); 
                        if ((o == null)||!(o instanceof Variable)){ 
                            throw new ParseException("Variable ("+i+") no definida", PLXC.lex.getLine());
                        } 
                            RESULT = new ExpVariable(PLXC.lex.getLine(), (Variable) o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion ::= Expresion ASIGNA Expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=new LlamadaMetodo(PLXC.lex.getLine(),
                                        e1,
                                        Metodos.ASIGNA,
                                        new Instruccion[]{e2});
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expresion ::= IDENT ASIGNA Expresion 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Objeto obj = tabla.buscarObjeto(i);

            if(obj == null) {
                throw new ParseException("Variable <" + i + "> no ha sido declarada", PLXC.lex.getLine());
            }

            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                new ExpVariable(PLXC.lex.getLine(), (Variable) obj),
                Metodos.ASIGNA,
                new Instruccion[]{e}
            );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion ::= Expresion OLOG Expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CortoCircuito(PLXC.lex.getLine(), e1, Metodos.OLOG,  e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion ::= Expresion YLOG Expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CortoCircuito(PLXC.lex.getLine(), e1, Metodos.YLOG,  e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion ::= Expresion OperadorR Expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e1, o, new Instruccion[]{e2});
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= Expresion OperadorA Expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e1, o, new Instruccion[]{e2});
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= Expresion OperadorM Expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e1, o, new Instruccion[]{e2});
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= OperadorU Expresion 
            {
              Instruccion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e, o, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= Expresion OperadorUPost 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new CopiaYLlama(PLXC.lex.getLine(), e , op, null);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion ::= AP Expresion CP 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= AP ExpTipo CP Expresion 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 var et = new ExpTipo (PLXC.lex.getLine(), t); RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e, Metodos.CAST,  new Instruccion[]{et});
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OperadorL ::= YLOG 
            {
              String RESULT =null;
		 RESULT= Metodos.YLOG; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorL",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OperadorL ::= OLOG 
            {
              String RESULT =null;
		 RESULT= Metodos.OLOG; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorL",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Literal ::= ENTERO 
            {
              Literal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Literal (bloqueActual, TipoInt.instancia, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Literal ::= CARACTER 
            {
              Literal RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Literal (bloqueActual, TipoInt.instancia, c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Literal ::= REAL 
            {
              Literal RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Literal (bloqueActual, TipoInt.instancia, r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OperadorR ::= IGUAL 
            {
              String RESULT =null;
		 RESULT= Metodos.IGUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OperadorR ::= DIFERENTE 
            {
              String RESULT =null;
		 RESULT= Metodos.DIFERENTE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OperadorR ::= MENOR 
            {
              String RESULT =null;
		 RESULT= Metodos.MENOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OperadorR ::= MENORIG 
            {
              String RESULT =null;
		 RESULT= Metodos.MENORIG; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OperadorR ::= MAYOR 
            {
              String RESULT =null;
		 RESULT= Metodos.MAYOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OperadorR ::= MAYORIG 
            {
              String RESULT =null;
		 RESULT= Metodos.MAYORIG; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OperadorA ::= MAS 
            {
              String RESULT =null;
		RESULT= Metodos.SUMA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OperadorA ::= MENOS 
            {
              String RESULT =null;
		RESULT= Metodos.RESTA;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OperadorM ::= MULT 
            {
              String RESULT =null;
		RESULT= Metodos.MULT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorM",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OperadorM ::= DIVID 
            {
              String RESULT =null;
		RESULT= Metodos.DIVID;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorM",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OperadorM ::= PORCENT 
            {
              String RESULT =null;
		RESULT= Metodos.RESTO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorM",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OperadorU ::= MASMAS 
            {
              String RESULT =null;
		RESULT= Metodos.SIGUIENTE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorU",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OperadorU ::= MENOSMENOS 
            {
              String RESULT =null;
		RESULT= Metodos.ANTERIOR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorU",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OperadorU ::= VIRGU 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorU",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OperadorU ::= MENOS 
            {
              String RESULT =null;
		RESULT= Metodos.OPUESTO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorU",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OperadorUPost ::= MASMAS 
            {
              String RESULT =null;
		RESULT=Metodos.SIGUIENTE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorUPost",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OperadorUPost ::= MENOSMENOS 
            {
              String RESULT =null;
		 RESULT = Metodos.ANTERIOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorUPost",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
