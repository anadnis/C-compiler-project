
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.text.ParseException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\007" +
    "\000\002\004\011\000\002\004\007\000\002\004\011\000" +
    "\002\004\014\000\002\004\007\000\002\004\006\000\002" +
    "\004\004\000\002\017\002\000\002\006\003\000\002\006" +
    "\003\000\002\006\002\000\002\007\003\000\002\007\002" +
    "\000\002\010\003\000\002\010\002\000\002\016\004\000" +
    "\002\016\003\000\002\003\004\000\002\003\007\000\002" +
    "\003\006\000\002\003\011\000\002\003\005\000\002\003" +
    "\010\000\002\003\007\000\002\003\012\000\002\013\003" +
    "\000\002\013\005\000\002\014\003\000\002\014\005\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\005\000\002\005\005\000\002\005\004\000\002\005\005" +
    "\000\002\005\014\000\002\005\012\000\002\005\006\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\004\000\002\005" +
    "\004\000\002\005\005\000\002\005\006\000\002\025\003" +
    "\000\002\025\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\022\003\000\002\022\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\024\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\056\004\034\007\017\014\016\016\013\017" +
    "\021\020\035\021\006\022\031\024\010\025\024\026\011" +
    "\027\023\033\033\034\022\035\032\036\037\037\007\041" +
    "\005\055\040\060\030\061\012\063\027\001\002\000\032" +
    "\007\017\021\006\033\033\034\022\035\032\036\037\037" +
    "\007\041\005\055\040\060\030\061\012\063\027\001\002" +
    "\000\032\007\uffb4\021\uffb4\033\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\041\uffb4\055\uffb4\060\uffb4\061\uffb4\063\uffb4" +
    "\001\002\000\032\007\017\021\006\033\033\034\022\035" +
    "\032\036\037\037\007\041\005\055\040\060\030\061\012" +
    "\063\027\001\002\000\056\005\uffd9\006\uffd9\010\uffd9\011" +
    "\uffd9\030\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\204" +
    "\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\056\uffd9\060\uffd9\061\uffd9\062\uffd9\001\002" +
    "\000\006\010\uffde\037\uffde\001\002\000\006\010\uffdd\037" +
    "\uffdd\001\002\000\032\007\uffb6\021\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\041\uffb6\055\uffb6\060\uffb6\061" +
    "\uffb6\063\uffb6\001\002\000\004\007\200\001\002\000\004" +
    "\037\170\001\002\000\046\006\167\040\066\041\042\042" +
    "\056\043\064\044\065\045\044\046\053\047\055\050\062" +
    "\051\046\052\057\053\060\054\050\056\043\060\061\061" +
    "\047\062\052\001\002\000\004\007\161\001\002\000\042" +
    "\007\017\021\006\024\010\025\024\026\011\027\023\033" +
    "\033\034\022\035\032\036\037\037\007\041\005\055\040" +
    "\060\030\061\012\063\027\001\002\000\006\006\153\011" +
    "\113\001\002\000\056\004\034\007\017\014\016\016\013" +
    "\017\021\020\035\021\006\022\031\024\010\025\024\026" +
    "\011\027\023\033\033\034\022\035\032\036\037\037\007" +
    "\041\005\055\040\060\030\061\012\063\027\001\002\000" +
    "\056\005\uffc5\006\uffc5\010\uffc5\011\uffc5\030\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\056\uffc5" +
    "\060\uffc5\061\uffc5\062\uffc5\001\002\000\006\010\uffdb\037" +
    "\uffdb\001\002\000\006\010\uffdc\037\uffdc\001\002\000\060" +
    "\002\144\004\034\007\017\014\016\016\013\017\021\020" +
    "\035\021\006\022\031\024\010\025\024\026\011\027\023" +
    "\033\033\034\022\035\032\036\037\037\007\041\005\055" +
    "\040\060\030\061\012\063\027\001\002\000\062\002\001" +
    "\004\001\005\001\007\001\014\001\016\001\017\001\020" +
    "\001\021\001\022\001\024\001\025\001\026\001\027\001" +
    "\033\001\034\001\035\001\036\001\037\001\041\001\055" +
    "\001\060\001\061\001\063\001\001\002\000\032\007\uffb5" +
    "\021\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\041" +
    "\uffb5\055\uffb5\060\uffb5\061\uffb5\063\uffb5\001\002\000\032" +
    "\007\uffb7\021\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\041\uffb7\055\uffb7\060\uffb7\061\uffb7\063\uffb7\001\002" +
    "\000\004\007\140\001\002\000\056\005\uffc3\006\uffc3\010" +
    "\uffc3\011\uffc3\030\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\056\uffc3\060\uffc3\061\uffc3\062\uffc3" +
    "\001\002\000\056\005\uffc6\006\uffc6\010\uffc6\011\uffc6\030" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\056\uffc6\060\uffc6\061\uffc6\062\uffc6\001\002\000\060" +
    "\004\ufff4\005\133\007\ufff4\014\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\041\ufff4\055" +
    "\ufff4\060\ufff4\061\ufff4\063\ufff4\001\002\000\004\007\ufff4" +
    "\001\002\000\056\005\uffda\006\uffda\010\uffda\011\uffda\030" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda" +
    "\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\056\uffda\060\uffda\061\uffda\062\uffda\001\002\000\056" +
    "\005\uffc4\006\uffc4\010\uffc4\011\uffc4\030\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\056\uffc4\060" +
    "\uffc4\061\uffc4\062\uffc4\001\002\000\032\007\017\021\006" +
    "\033\033\034\022\035\032\036\037\037\007\041\005\055" +
    "\040\060\030\061\012\063\027\001\002\000\056\005\uffd6" +
    "\006\uffd6\010\uffd6\011\uffd6\030\uffd6\040\066\041\042\042" +
    "\056\043\064\044\uffd6\045\044\046\053\047\055\050\062" +
    "\051\046\052\057\053\uffd6\054\uffd6\056\uffd6\060\061\061" +
    "\047\062\052\001\002\000\032\007\uffbb\021\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\041\uffbb\055\uffbb\060" +
    "\uffbb\061\uffbb\063\uffbb\001\002\000\032\007\017\021\006" +
    "\033\033\034\022\035\032\036\037\037\007\041\005\055" +
    "\040\060\030\061\012\063\027\001\002\000\032\007\uffc0" +
    "\021\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\041" +
    "\uffc0\055\uffc0\060\uffc0\061\uffc0\063\uffc0\001\002\000\032" +
    "\007\017\021\006\033\033\034\022\035\032\036\037\037" +
    "\007\041\005\055\040\060\030\061\012\063\027\001\002" +
    "\000\032\007\uffc2\021\uffc2\033\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\037\uffc2\041\uffc2\055\uffc2\060\uffc2\061\uffc2\063\uffc2" +
    "\001\002\000\056\005\uffb2\006\uffb2\010\uffb2\011\uffb2\030" +
    "\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054" +
    "\uffb2\056\uffb2\060\uffb2\061\uffb2\062\uffb2\001\002\000\032" +
    "\007\017\021\006\033\033\034\022\035\032\036\037\037" +
    "\007\041\005\055\040\060\030\061\012\063\027\001\002" +
    "\000\032\007\017\021\006\033\033\034\022\035\032\036" +
    "\037\037\007\041\005\055\040\060\030\061\012\063\027" +
    "\001\002\000\032\007\uffb8\021\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\041\uffb8\055\uffb8\060\uffb8\061\uffb8" +
    "\063\uffb8\001\002\000\032\007\uffbf\021\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\041\uffbf\055\uffbf\060\uffbf" +
    "\061\uffbf\063\uffbf\001\002\000\032\007\017\021\006\033" +
    "\033\034\022\035\032\036\037\037\007\041\005\055\040" +
    "\060\030\061\012\063\027\001\002\000\032\007\uffbe\021" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\041\uffbe" +
    "\055\uffbe\060\uffbe\061\uffbe\063\uffbe\001\002\000\032\007" +
    "\uffba\021\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba" +
    "\041\uffba\055\uffba\060\uffba\061\uffba\063\uffba\001\002\000" +
    "\032\007\uffc1\021\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\041\uffc1\055\uffc1\060\uffc1\061\uffc1\063\uffc1\001" +
    "\002\000\032\007\017\021\006\033\033\034\022\035\032" +
    "\036\037\037\007\041\005\055\040\060\030\061\012\063" +
    "\027\001\002\000\056\005\uffb3\006\uffb3\010\uffb3\011\uffb3" +
    "\030\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3" +
    "\054\uffb3\056\uffb3\060\uffb3\061\uffb3\062\uffb3\001\002\000" +
    "\032\007\uffbd\021\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\041\uffbd\055\uffbd\060\uffbd\061\uffbd\063\uffbd\001" +
    "\002\000\056\005\uffcb\006\uffcb\010\uffcb\011\uffcb\030\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb" +
    "\056\uffcb\060\uffcb\061\uffcb\062\uffcb\001\002\000\032\007" +
    "\uffb9\021\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\041\uffb9\055\uffb9\060\uffb9\061\uffb9\063\uffb9\001\002\000" +
    "\032\007\017\021\006\033\033\034\022\035\032\036\037" +
    "\037\007\041\005\055\040\060\030\061\012\063\027\001" +
    "\002\000\032\007\uffbc\021\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\041\uffbc\055\uffbc\060\uffbc\061\uffbc\063" +
    "\uffbc\001\002\000\056\005\uffd8\006\uffd8\010\uffd8\011\uffd8" +
    "\030\uffd8\040\066\041\042\042\056\043\064\044\065\045" +
    "\044\046\053\047\055\050\062\051\046\052\057\053\060" +
    "\054\050\056\043\060\061\061\047\062\052\001\002\000" +
    "\056\005\uffd0\006\uffd0\010\uffd0\011\uffd0\030\uffd0\040\066" +
    "\041\042\042\056\043\064\044\uffd0\045\044\046\053\047" +
    "\055\050\062\051\046\052\057\053\uffd0\054\uffd0\056\uffd0" +
    "\060\061\061\047\062\052\001\002\000\056\005\uffce\006" +
    "\uffce\010\uffce\011\uffce\030\uffce\040\uffce\041\uffce\042\056" +
    "\043\064\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051" +
    "\uffce\052\uffce\053\uffce\054\uffce\056\uffce\060\061\061\047" +
    "\062\052\001\002\000\056\005\uffcd\006\uffcd\010\uffcd\011" +
    "\uffcd\030\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053" +
    "\uffcd\054\uffcd\056\uffcd\060\061\061\047\062\uffcd\001\002" +
    "\000\056\005\uffd1\006\uffd1\010\uffd1\011\uffd1\030\uffd1\040" +
    "\066\041\042\042\056\043\064\044\uffd1\045\044\046\053" +
    "\047\055\050\062\051\046\052\057\053\060\054\uffd1\056" +
    "\uffd1\060\061\061\047\062\052\001\002\000\056\005\uffcf" +
    "\006\uffcf\010\uffcf\011\uffcf\030\uffcf\040\066\041\042\042" +
    "\056\043\064\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\054\uffcf\056\uffcf\060\061\061" +
    "\047\062\052\001\002\000\056\005\uffd5\006\uffd5\010\uffd5" +
    "\011\uffd5\030\uffd5\040\066\041\042\042\056\043\064\044" +
    "\uffd5\045\044\046\053\047\055\050\062\051\046\052\057" +
    "\053\060\054\050\056\043\060\061\061\047\062\052\001" +
    "\002\000\004\007\077\001\002\000\044\006\ufff1\007\017" +
    "\021\006\024\010\025\024\026\011\027\023\033\033\034" +
    "\022\035\032\036\037\037\007\041\005\055\040\060\030" +
    "\061\012\063\027\001\002\000\046\006\ufff2\040\066\041" +
    "\042\042\056\043\064\044\065\045\044\046\053\047\055" +
    "\050\062\051\046\052\057\053\060\054\050\056\043\060" +
    "\061\061\047\062\052\001\002\000\006\006\ufff3\011\113" +
    "\001\002\000\004\006\103\001\002\000\034\006\uffef\007" +
    "\017\021\006\033\033\034\022\035\032\036\037\037\007" +
    "\041\005\055\040\060\030\061\012\063\027\001\002\000" +
    "\004\006\106\001\002\000\046\006\ufff0\040\066\041\042" +
    "\042\056\043\064\044\065\045\044\046\053\047\055\050" +
    "\062\051\046\052\057\053\060\054\050\056\043\060\061" +
    "\061\047\062\052\001\002\000\034\007\017\010\uffed\021" +
    "\006\033\033\034\022\035\032\036\037\037\007\041\005" +
    "\055\040\060\030\061\012\063\027\001\002\000\046\010" +
    "\uffee\040\066\041\042\042\056\043\064\044\065\045\044" +
    "\046\053\047\055\050\062\051\046\052\057\053\060\054" +
    "\050\056\043\060\061\061\047\062\052\001\002\000\004" +
    "\010\111\001\002\000\056\004\034\007\017\014\016\016" +
    "\013\017\021\020\035\021\006\022\031\024\010\025\024" +
    "\026\011\027\023\033\033\034\022\035\032\036\037\037" +
    "\007\041\005\055\040\060\030\061\012\063\027\001\002" +
    "\000\064\002\ufff8\004\ufff8\005\ufff8\007\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\027\ufff8\033\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\037\ufff8\041\ufff8\055\ufff8\060\ufff8\061\ufff8\063\ufff8" +
    "\001\002\000\004\037\114\001\002\000\012\006\uffe6\011" +
    "\uffe6\012\115\044\116\001\002\000\004\033\120\001\002" +
    "\000\032\007\017\021\006\033\033\034\022\035\032\036" +
    "\037\037\007\041\005\055\040\060\030\061\012\063\027" +
    "\001\002\000\050\006\uffe4\011\uffe4\040\066\041\042\042" +
    "\056\043\064\044\065\045\044\046\053\047\055\050\062" +
    "\051\046\052\057\053\060\054\050\056\043\060\061\061" +
    "\047\062\052\001\002\000\004\013\121\001\002\000\010" +
    "\006\uffe5\011\uffe5\044\122\001\002\000\006\004\125\037" +
    "\124\001\002\000\006\006\uffe3\011\uffe3\001\002\000\006" +
    "\006\uffe2\011\uffe2\001\002\000\032\007\017\021\006\033" +
    "\033\034\022\035\032\036\037\037\007\041\005\055\040" +
    "\060\030\061\012\063\027\001\002\000\006\005\131\011" +
    "\130\001\002\000\050\005\uffe0\011\uffe0\040\066\041\042" +
    "\042\056\043\064\044\065\045\044\046\053\047\055\050" +
    "\062\051\046\052\057\053\060\054\050\056\043\060\061" +
    "\061\047\062\052\001\002\000\032\007\017\021\006\033" +
    "\033\034\022\035\032\036\037\037\007\041\005\055\040" +
    "\060\030\061\012\063\027\001\002\000\006\006\uffe1\011" +
    "\uffe1\001\002\000\050\005\uffdf\011\uffdf\040\066\041\042" +
    "\042\056\043\064\044\065\045\044\046\053\047\055\050" +
    "\062\051\046\052\057\053\060\054\050\056\043\060\061" +
    "\061\047\062\052\001\002\000\064\002\ufff5\004\ufff5\005" +
    "\ufff5\007\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\041\ufff5\055\ufff5" +
    "\060\ufff5\061\ufff5\063\ufff5\001\002\000\056\004\034\007" +
    "\017\014\016\016\013\017\021\020\035\021\006\022\031" +
    "\024\010\025\024\026\011\027\023\033\033\034\022\035" +
    "\032\036\037\037\007\041\005\055\040\060\030\061\012" +
    "\063\027\001\002\000\060\004\034\005\137\007\017\014" +
    "\016\016\013\017\021\020\035\021\006\022\031\024\010" +
    "\025\024\026\011\027\023\033\033\034\022\035\032\036" +
    "\037\037\007\041\005\055\040\060\030\061\012\063\027" +
    "\001\002\000\062\002\uffff\004\uffff\005\uffff\007\uffff\014" +
    "\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\033\uffff\034\uffff\035\uffff\036" +
    "\uffff\037\uffff\041\uffff\055\uffff\060\uffff\061\uffff\063\uffff" +
    "\001\002\000\064\002\ufff6\004\ufff6\005\ufff6\007\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\024\ufff6\025\ufff6\026\ufff6\027\ufff6\033\ufff6\034\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\041\ufff6\055\ufff6\060\ufff6\061\ufff6" +
    "\063\ufff6\001\002\000\032\007\017\021\006\033\033\034" +
    "\022\035\032\036\037\037\007\041\005\055\040\060\030" +
    "\061\012\063\027\001\002\000\046\010\142\040\066\041" +
    "\042\042\056\043\064\044\065\045\044\046\053\047\055" +
    "\050\062\051\046\052\057\053\060\054\050\056\043\060" +
    "\061\061\047\062\052\001\002\000\004\006\143\001\002" +
    "\000\064\002\ufff7\004\ufff7\005\ufff7\007\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\033\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\041\ufff7\055\ufff7\060\ufff7\061\ufff7\063\ufff7" +
    "\001\002\000\004\002\000\001\002\000\004\016\146\001" +
    "\002\000\004\007\147\001\002\000\032\007\017\021\006" +
    "\033\033\034\022\035\032\036\037\037\007\041\005\055" +
    "\040\060\030\061\012\063\027\001\002\000\046\010\151" +
    "\040\066\041\042\042\056\043\064\044\065\045\044\046" +
    "\053\047\055\050\062\051\046\052\057\053\060\054\050" +
    "\056\043\060\061\061\047\062\052\001\002\000\004\006" +
    "\152\001\002\000\064\002\ufff9\004\ufff9\005\ufff9\007\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\033\ufff9\034\ufff9" +
    "\035\ufff9\036\ufff9\037\ufff9\041\ufff9\055\ufff9\060\ufff9\061" +
    "\ufff9\063\ufff9\001\002\000\064\002\ufffe\004\ufffe\005\ufffe" +
    "\007\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\022\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\033\ufffe" +
    "\034\ufffe\035\ufffe\036\ufffe\037\ufffe\041\ufffe\055\ufffe\060" +
    "\ufffe\061\ufffe\063\ufffe\001\002\000\004\010\157\001\002" +
    "\000\046\010\156\040\066\041\042\042\056\043\064\044" +
    "\065\045\044\046\053\047\055\050\062\051\046\052\057" +
    "\053\060\054\050\056\043\060\061\061\047\062\052\001" +
    "\002\000\056\005\uffca\006\uffca\010\uffca\011\uffca\030\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca" +
    "\056\uffca\060\uffca\061\uffca\062\uffca\001\002\000\032\007" +
    "\017\021\006\033\033\034\022\035\032\036\037\037\007" +
    "\041\005\055\040\060\030\061\012\063\027\001\002\000" +
    "\056\005\uffc9\006\uffc9\010\uffc9\011\uffc9\030\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\056\uffc9" +
    "\060\061\061\047\062\uffc9\001\002\000\032\007\017\021" +
    "\006\033\033\034\022\035\032\036\037\037\007\041\005" +
    "\055\040\060\030\061\012\063\027\001\002\000\046\010" +
    "\163\040\066\041\042\042\056\043\064\044\065\045\044" +
    "\046\053\047\055\050\062\051\046\052\057\053\060\054" +
    "\050\056\043\060\061\061\047\062\052\001\002\000\056" +
    "\004\034\007\017\014\016\016\013\017\021\020\035\021" +
    "\006\022\031\024\010\025\024\026\011\027\023\033\033" +
    "\034\022\035\032\036\037\037\007\041\005\055\040\060" +
    "\030\061\012\063\027\001\002\000\064\002\ufffc\004\ufffc" +
    "\005\ufffc\007\ufffc\014\ufffc\015\165\016\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc" +
    "\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\041\ufffc\055" +
    "\ufffc\060\ufffc\061\ufffc\063\ufffc\001\002\000\056\004\034" +
    "\007\017\014\016\016\013\017\021\020\035\021\006\022" +
    "\031\024\010\025\024\026\011\027\023\033\033\034\022" +
    "\035\032\036\037\037\007\041\005\055\040\060\030\061" +
    "\012\063\027\001\002\000\064\002\ufffb\004\ufffb\005\ufffb" +
    "\007\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\022\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\036\ufffb\037\ufffb\041\ufffb\055\ufffb\060" +
    "\ufffb\061\ufffb\063\ufffb\001\002\000\064\002\ufffd\004\ufffd" +
    "\005\ufffd\007\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\041\ufffd\055" +
    "\ufffd\060\ufffd\061\ufffd\063\ufffd\001\002\000\012\006\uffea" +
    "\011\uffea\012\171\044\172\001\002\000\004\033\174\001" +
    "\002\000\032\007\017\021\006\033\033\034\022\035\032" +
    "\036\037\037\007\041\005\055\040\060\030\061\012\063" +
    "\027\001\002\000\050\006\uffe8\011\uffe8\040\066\041\042" +
    "\042\056\043\064\044\065\045\044\046\053\047\055\050" +
    "\062\051\046\052\057\053\060\054\050\056\043\060\061" +
    "\061\047\062\052\001\002\000\004\013\175\001\002\000" +
    "\010\006\uffe9\011\uffe9\044\176\001\002\000\006\004\125" +
    "\037\124\001\002\000\006\006\uffe7\011\uffe7\001\002\000" +
    "\032\007\017\021\006\033\033\034\022\035\032\036\037" +
    "\037\007\041\005\055\040\060\030\061\012\063\027\001" +
    "\002\000\046\010\202\040\066\041\042\042\056\043\064" +
    "\044\065\045\044\046\053\047\055\050\062\051\046\052" +
    "\057\053\060\054\050\056\043\060\061\061\047\062\052" +
    "\001\002\000\056\004\034\007\017\014\016\016\013\017" +
    "\021\020\035\021\006\022\031\024\010\025\024\026\011" +
    "\027\023\033\033\034\022\035\032\036\037\037\007\041" +
    "\005\055\040\060\030\061\012\063\027\001\002\000\064" +
    "\002\ufffa\004\ufffa\005\ufffa\007\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\041\ufffa\055\ufffa\060\ufffa\061\ufffa\063\ufffa\001\002" +
    "\000\032\007\017\021\006\033\033\034\022\035\032\036" +
    "\037\037\007\041\005\055\040\060\030\061\012\063\027" +
    "\001\002\000\056\005\uffd7\006\uffd7\010\uffd7\011\uffd7\030" +
    "\uffd7\040\066\041\042\042\056\043\064\044\065\045\044" +
    "\046\053\047\055\050\062\051\046\052\057\053\060\054" +
    "\050\056\043\060\061\061\047\062\052\001\002\000\050" +
    "\011\210\030\207\040\066\041\042\042\056\043\064\044" +
    "\065\045\044\046\053\047\055\050\062\051\046\052\057" +
    "\053\060\054\050\056\043\060\061\061\047\062\052\001" +
    "\002\000\004\033\212\001\002\000\032\007\017\021\006" +
    "\033\033\034\022\035\032\036\037\037\007\041\005\055" +
    "\040\060\030\061\012\063\027\001\002\000\056\005\uffd2" +
    "\006\uffd2\010\uffd2\011\uffd2\030\uffd2\040\066\041\042\042" +
    "\056\043\064\044\065\045\044\046\053\047\055\050\062" +
    "\051\046\052\057\053\060\054\050\056\043\060\061\061" +
    "\047\062\052\001\002\000\004\031\213\001\002\000\004" +
    "\033\214\001\002\000\006\011\215\032\216\001\002\000" +
    "\032\007\017\021\006\033\033\034\022\035\032\036\037" +
    "\037\007\041\005\055\040\060\030\061\012\063\027\001" +
    "\002\000\004\033\217\001\002\000\004\011\220\001\002" +
    "\000\032\007\017\021\006\033\033\034\022\035\032\036" +
    "\037\037\007\041\005\055\040\060\030\061\012\063\027" +
    "\001\002\000\056\005\uffd4\006\uffd4\010\uffd4\011\uffd4\030" +
    "\uffd4\040\066\041\042\042\056\043\064\044\065\045\044" +
    "\046\053\047\055\050\062\051\046\052\057\053\060\054" +
    "\050\056\043\060\061\061\047\062\052\001\002\000\056" +
    "\005\uffd3\006\uffd3\010\uffd3\011\uffd3\030\uffd3\040\066\041" +
    "\042\042\056\043\064\044\065\045\044\046\053\047\055" +
    "\050\062\051\046\052\057\053\060\054\050\056\043\060" +
    "\061\061\047\062\052\001\002\000\052\005\uffcc\006\uffcc" +
    "\010\uffcc\011\uffcc\030\uffcc\040\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\052\uffcc\053\uffcc\054\uffcc\056\uffcc\062\uffcc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\020\002\024\003\017\004\025\005\014\021" +
    "\003\026\013\027\035\001\001\000\010\005\222\021\003" +
    "\027\035\001\001\000\002\001\001\000\010\005\205\021" +
    "\003\027\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\044\022\053\023\050\024\062" +
    "\001\001\000\002\001\001\000\012\005\154\021\003\026" +
    "\153\027\035\001\001\000\002\001\001\000\016\003\017" +
    "\004\144\005\014\021\003\026\013\027\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\017\004\135\005\014\021\003\026\013\027\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\133\001\001\000\004\017\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\040\021\003\027" +
    "\035\001\001\000\012\020\044\022\053\023\050\024\062" +
    "\001\001\000\002\001\001\000\010\005\074\021\003\027" +
    "\035\001\001\000\002\001\001\000\010\005\073\021\003" +
    "\027\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\072\021\003\027\035\001\001\000\010\005\071" +
    "\021\003\027\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\070\021\003\027\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\067\021\003\027\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\066\021\003\027\035\001\001\000\002\001\001\000\012" +
    "\020\044\022\053\023\050\024\062\001\001\000\012\020" +
    "\044\022\053\023\050\024\062\001\001\000\012\020\044" +
    "\022\053\023\050\024\062\001\001\000\012\020\044\022" +
    "\053\023\050\024\062\001\001\000\012\020\044\022\053" +
    "\023\050\024\062\001\001\000\012\020\044\022\053\023" +
    "\050\024\062\001\001\000\012\020\044\022\053\023\050" +
    "\024\062\001\001\000\002\001\001\000\016\003\100\005" +
    "\077\006\101\021\003\026\013\027\035\001\001\000\012" +
    "\020\044\022\053\023\050\024\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\104\007\103\021\003" +
    "\027\035\001\001\000\002\001\001\000\012\020\044\022" +
    "\053\023\050\024\062\001\001\000\012\005\106\010\107" +
    "\021\003\027\035\001\001\000\012\020\044\022\053\023" +
    "\050\024\062\001\001\000\002\001\001\000\016\003\017" +
    "\004\111\005\014\021\003\026\013\027\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\116\021\003\027\035\001\001\000" +
    "\012\020\044\022\053\023\050\024\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\126\014\125" +
    "\021\003\027\035\001\001\000\002\001\001\000\012\020" +
    "\044\022\053\023\050\024\062\001\001\000\010\005\131" +
    "\021\003\027\035\001\001\000\002\001\001\000\012\020" +
    "\044\022\053\023\050\024\062\001\001\000\002\001\001" +
    "\000\020\002\134\003\017\004\025\005\014\021\003\026" +
    "\013\027\035\001\001\000\016\003\017\004\135\005\014" +
    "\021\003\026\013\027\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\140\021\003\027\035\001\001" +
    "\000\012\020\044\022\053\023\050\024\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\147\021\003\027" +
    "\035\001\001\000\012\020\044\022\053\023\050\024\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\044\022\053\023\050" +
    "\024\062\001\001\000\002\001\001\000\010\005\157\021" +
    "\003\027\035\001\001\000\012\020\044\022\053\023\050" +
    "\024\062\001\001\000\010\005\161\021\003\027\035\001" +
    "\001\000\012\020\044\022\053\023\050\024\062\001\001" +
    "\000\016\003\017\004\163\005\014\021\003\026\013\027" +
    "\035\001\001\000\002\001\001\000\016\003\017\004\165" +
    "\005\014\021\003\026\013\027\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\172\021\003\027\035\001\001\000\012\020" +
    "\044\022\053\023\050\024\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\176\001\001\000\002\001" +
    "\001\000\010\005\200\021\003\027\035\001\001\000\012" +
    "\020\044\022\053\023\050\024\062\001\001\000\016\003" +
    "\017\004\202\005\014\021\003\026\013\027\035\001\001" +
    "\000\002\001\001\000\010\005\204\021\003\027\035\001" +
    "\001\000\012\020\044\022\053\023\050\024\062\001\001" +
    "\000\012\020\044\022\053\023\050\024\062\001\001\000" +
    "\002\001\001\000\010\005\210\021\003\027\035\001\001" +
    "\000\012\020\044\022\053\023\050\024\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\221\021\003\027\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\220\021\003\027\035\001\001" +
    "\000\012\020\044\022\053\023\050\024\062\001\001\000" +
    "\012\020\044\022\053\023\050\024\062\001\001\000\012" +
    "\020\044\022\053\023\050\024\062\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    action_obj.tabla = new TablaSimbolos();
    action_obj.bloqueActual = 0; // Bloque en el que me encuentro
    action_obj.cBloque = 0; // Contador de bloques

    }


    public static void main(String[] args) throws Exception {
        PLXC.out.println("  error;");
        PLXC.out.println("  halt;");
    }
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) {
        System.err.println("Syntax Error. Línea: " + PLXC.lex.getLine() + " Columna: " + PLXC.lex.getColumn());
        PLXC.out.println("# Syntax Error");
        PLXC.out.println("error;");
        PLXC.out.println("halt;");
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    TablaSimbolos tabla =new TablaSimbolos();
    int bloqueActual=0;
    int cBloque = 0;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Lista_de_sent ::= Sentencia 
            {
              Bloque RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Bloque b=new Bloque(PLXC.lex.getLine());
                        b.add(s);
                        RESULT=b;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Lista_de_sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_de_sent ::= Lista_de_sent Sentencia 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        l.add(s);
                        RESULT=l;    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Sentencia ::= List_declar_var PCOMA 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Sentencia ::= Expresion PCOMA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Sentencia ::= IF AP Expresion CP Sentencia 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion sT = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentIF(PLXC.lex.getLine(),c,sT,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Sentencia ::= IF AP Expresion CP Sentencia ELSE Sentencia 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion sT = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion sF = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentIF(PLXC.lex.getLine(),c,sT,sF);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sentencia ::= WHILE AP Expresion CP Sentencia 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentWHILE(PLXC.lex.getLine(),c,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentencia ::= DO Sentencia WHILE AP Expresion CP PCOMA 
            {
              Instruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new SentDOWHILE(PLXC.lex.getLine(),c,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentencia ::= FOR Inicio_bloque AP Inicio_forc PCOMA Cond_forc PCOMA Act_forc CP Sentencia 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        tabla.borrarBloque(bloqueActual);
                        bloqueActual=b;
                        RESULT = new SentFORC(PLXC.lex.getLine(),i,c,a,s);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= PRINT AP Expresion CP PCOMA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new LlamadaMetodo(PLXC.lex.getLine(),e,Metodos.IMPRIMIR,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencia ::= A_LLAVE Inicio_bloque Lista_de_sent C_LLAVE 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        //hay que eliminar las variables de ese bloque, de la tabla, y volver al bloque anterior
                        //tabla.borrarBloque(bloqueActual);
                        bloqueActual = b; //con esto vuelvo al bloque anterior
                        RESULT=l;
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sentencia ::= A_LLAVE C_LLAVE 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Inicio_bloque ::= 
            {
              Integer RESULT =null;
		 
                        RESULT = bloqueActual; //Guardo el bloque en el que estaba
                        cBloque++;
                        bloqueActual = cBloque; //a lo mejor hay que comentarlo
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio_bloque",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Inicio_forc ::= List_declar_var 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio_forc",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Inicio_forc ::= Expresion 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio_forc",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Inicio_forc ::= 
            {
              Instruccion RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio_forc",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Cond_forc ::= Expresion 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cond_forc",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Cond_forc ::= 
            {
              Instruccion RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cond_forc",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Act_forc ::= Expresion 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Act_forc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Act_forc ::= 
            {
              Instruccion RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Act_forc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Else_if ::= ELSE Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Else_if ::= PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // List_declar_var ::= ExpTipo IDENT 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            tabla.declararVariable(PLXC.lex.getLine(), i, bloqueActual, true, t);
                            RESULT = new ListaVar(PLXC.lex.getLine(), t);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // List_declar_var ::= ExpTipo IDENT AC ENTERO CC 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // List_declar_var ::= ExpTipo IDENT ASIGNA Expresion 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                            Variable v = tabla.declararVariable(PLXC.lex.getLine(),i, bloqueActual, true, t);
                            ListaVar l = new ListaVar(PLXC.lex.getLine(), t);
                            l.add(new LlamadaMetodo(PLXC.lex.getLine(),
                                        new ExpVariable(PLXC.lex.getLine(), v),
                                        Metodos.CONSTRUCTORCOPIA,
                                        new Instruccion []{e}));

                            RESULT=l;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // List_declar_var ::= ExpTipo IDENT AC ENTERO CC ASIGNA Array 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // List_declar_var ::= List_declar_var COMA IDENT 
            {
              ListaVar RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tabla.declararVariable(PLXC.lex.getLine(),i,bloqueActual,true,l.getTipo());
                            RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // List_declar_var ::= List_declar_var COMA IDENT AC ENTERO CC 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ListaVar t = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // List_declar_var ::= List_declar_var COMA IDENT ASIGNA Expresion 
            {
              ListaVar RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Variable v = tabla.declararVariable(PLXC.lex.getLine(),i, bloqueActual, true, l.getTipo());
                            l.add(new LlamadaMetodo(PLXC.lex.getLine(),
                                            new ExpVariable(PLXC.lex.getLine(), v),
                                            Metodos.CONSTRUCTORCOPIA,
                                            new Instruccion []{e}));
                            RESULT=l;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // List_declar_var ::= List_declar_var COMA IDENT AC ENTERO CC ASIGNA Array 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ListaVar t = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Array ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Array",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Array ::= A_LLAVE Lista_exp C_LLAVE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Array",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Lista_exp ::= Expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Lista_exp ::= Lista_exp COMA Expresion 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExpTipo ::= INT 
            {
              Tipo RESULT =null;
		RESULT = TipoInt.instancia;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpTipo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExpTipo ::= CHAR 
            {
              Tipo RESULT =null;
		RESULT = TipoChar.instancia;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpTipo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ExpTipo ::= FLOAT 
            {
              Tipo RESULT =null;
		RESULT = TipoReal.instancia;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpTipo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ExpTipo ::= BOOLEAN 
            {
              Tipo RESULT =null;
		RESULT = TipoBool.instancia;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpTipo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expresion ::= Literal 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpLiteral(PLXC.lex.getLine(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion ::= IDENT 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Objeto o = tabla.buscarObjeto(i); 
                        if ((o == null)||!(o instanceof Variable)){ 
                            throw new ParseException("Variable ("+i+") no definida", PLXC.lex.getLine());
                        } 
                            RESULT = new ExpVariable(PLXC.lex.getLine(), (Variable) o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expresion ::= Expresion ASIGNA Expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=new LlamadaMetodo(PLXC.lex.getLine(),
                                        e1,
                                        Metodos.ASIGNA,
                                        new Instruccion[]{e2});
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion ::= IDENT ASIGNA Expresion 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Objeto obj = tabla.buscarObjeto(i);
                    if(obj == null) {
                        throw new ParseException("Variable <" + i + "> no ha sido declarada", PLXC.lex.getLine());
                    }
                    RESULT = new LlamadaMetodo(
                        PLXC.lex.getLine(),
                        new ExpVariable(PLXC.lex.getLine(), (Variable) obj),
                        Metodos.ASIGNA,
                        new Instruccion[]{e}
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion ::= ADMIR Expresion 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e, Metodos.NLOG, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion ::= Expresion IMPLI Expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CortoCircuito(PLXC.lex.getLine(), new LlamadaMetodo(PLXC.lex.getLine(), e1, Metodos.NLOG, null), Metodos.OLOG,  e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= FORALL Expresion FROM ENTERO TO ENTERO STEP ENTERO COMA Expresion 
            {
              Instruccion RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion var = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer from = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer to = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer step = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion cuerpo = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SentINTFORALL(PLXC.lex.getLine(), var, cuerpo, from, to, step);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= FORALL Expresion FROM ENTERO TO ENTERO COMA Expresion 
            {
              Instruccion RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion var = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer from = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer to = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion cuerpo = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		int cero = 0; RESULT=new SentINTFORALL(PLXC.lex.getLine(), var, cuerpo, from, to, cero);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= FORALL Expresion COMA Expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SentFORALL(PLXC.lex.getLine(), e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= Expresion OLOG Expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CortoCircuito(PLXC.lex.getLine(), e1, Metodos.OLOG,  e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion ::= Expresion YLOG Expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CortoCircuito(PLXC.lex.getLine(), e1, Metodos.YLOG,  e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= Expresion OperadorR Expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e1, o, new Instruccion[]{e2});
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= Expresion OperadorA Expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e1, o, new Instruccion[]{e2});
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= Expresion OperadorM Expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e1, o, new Instruccion[]{e2});
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= OperadorU Expresion 
            {
              Instruccion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e, o, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= Expresion OperadorUPost 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new CopiaYLlama(PLXC.lex.getLine(), e , op, null);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= AP Expresion CP 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion ::= AP ExpTipo CP Expresion 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 var et = new ExpTipo (PLXC.lex.getLine(), t); RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e, Metodos.CAST,  new Instruccion[]{et});
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OperadorL ::= YLOG 
            {
              String RESULT =null;
		 RESULT= Metodos.YLOG; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorL",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OperadorL ::= OLOG 
            {
              String RESULT =null;
		 RESULT= Metodos.OLOG; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorL",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Literal ::= ENTERO 
            {
              Literal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Literal (bloqueActual, TipoInt.instancia, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Literal ::= CARACTER 
            {
              Literal RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Literal (bloqueActual, TipoChar.instancia, c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Literal ::= REAL 
            {
              Literal RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Literal (bloqueActual, TipoReal.instancia, r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Literal ::= BOOL 
            {
              Literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Literal (bloqueActual, TipoInt.instancia, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OperadorR ::= IGUAL 
            {
              String RESULT =null;
		 RESULT= Metodos.IGUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OperadorR ::= DIFERENTE 
            {
              String RESULT =null;
		 RESULT= Metodos.DIFERENTE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OperadorR ::= MENOR 
            {
              String RESULT =null;
		 RESULT= Metodos.MENOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OperadorR ::= MENORIG 
            {
              String RESULT =null;
		 RESULT= Metodos.MENORIG; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OperadorR ::= MAYOR 
            {
              String RESULT =null;
		 RESULT= Metodos.MAYOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OperadorR ::= MAYORIG 
            {
              String RESULT =null;
		 RESULT= Metodos.MAYORIG; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OperadorA ::= MAS 
            {
              String RESULT =null;
		RESULT= Metodos.SUMA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OperadorA ::= MENOS 
            {
              String RESULT =null;
		RESULT= Metodos.RESTA;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OperadorM ::= MULT 
            {
              String RESULT =null;
		RESULT= Metodos.MULT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorM",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OperadorM ::= DIVID 
            {
              String RESULT =null;
		RESULT= Metodos.DIVID;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorM",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OperadorM ::= PORCENT 
            {
              String RESULT =null;
		RESULT= Metodos.RESTO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorM",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OperadorU ::= MASMAS 
            {
              String RESULT =null;
		RESULT= Metodos.SIGUIENTE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorU",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OperadorU ::= MENOSMENOS 
            {
              String RESULT =null;
		RESULT= Metodos.ANTERIOR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorU",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OperadorU ::= VIRGU 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorU",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OperadorU ::= MENOS 
            {
              String RESULT =null;
		RESULT= Metodos.OPUESTO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorU",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OperadorUPost ::= MASMAS 
            {
              String RESULT =null;
		RESULT=Metodos.SIGUIENTE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorUPost",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OperadorUPost ::= MENOSMENOS 
            {
              String RESULT =null;
		 RESULT = Metodos.ANTERIOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorUPost",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
