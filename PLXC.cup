import java_cup.runtime.*;
import java.util.*;
import java.text.ParseException;

parser code {:
    public static void main(String[] args) throws Exception {
        PLXC.out.println("  error;");
        PLXC.out.println("  halt;");
    }
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) {
        System.err.println("Syntax Error. Línea: " + PLXC.lex.getLine() + " Columna: " + PLXC.lex.getColumn());
        PLXC.out.println("# Syntax Error");
        PLXC.out.println("error;");
        PLXC.out.println("halt;");
    }
:}

action code {:
    TablaSimbolos tabla =new TablaSimbolos();
    int bloqueActual=0;
    int cBloque = 0;
:}

init with {:
    action_obj.tabla = new TablaSimbolos();
    action_obj.bloqueActual = 0; // Bloque en el que me encuentro
    action_obj.cBloque = 0; // Contador de bloques
:}



/*Terminales */
terminal        A_LLAVE, C_LLAVE, PCOMA, AP, CP;
terminal        COMA, AC, CC;
terminal        IF, ELSE, WHILE, DO, FOR, PRINT, TO, DOWNTO, STEP, INT, FLOAT, CHAR;
terminal Integer ENTERO, CARACTER;
terminal Double REAL;
terminal String IDENT;

/*operadores*/
terminal        MAS, MENOS, MULT, DIVID, ASIGNA;
terminal        MENOR, MENORIG, MAYOR, MAYORIG, IGUAL, DIFERENTE, YLOG, OLOG, ADMIR;
terminal        MENOSUNARIO, MASMAS, MENOSMENOS;
terminal        PORCENT, VIRGU, CAST;


/*No terminales */
//SEGUNDA VERSIÓN MARTES 10
non terminal Bloque         Lista_de_sent; 
non terminal ListaVar       List_declar_var; //Inicio_forc, cierre_forc...todos los de arrays
non terminal Instruccion    Sentencia, Expresion, Inicio_forc, Cond_forc, Act_forc;
non terminal                Paso, Var_for, Array, Lista_exp, Direccion_for,Else_if;
non terminal Integer        Inicio_bloque;
non terminal String         OperadorR, OperadorU, OperadorA, OperadorM, OperadorUPost,OperadorL;
non terminal Tipo           ExpTipo;
non terminal Literal        Literal;

/*precedence*/ 
precedence left     ELSE;
precedence left     COMA;
precedence right    ASIGNA;
precedence left     OLOG;
precedence left     YLOG;
precedence nonassoc ADMIR; //(exclamacion de not) 
precedence left     IGUAL, DIFERENTE, MAYOR, MENOR, MAYORIG, MENORIG;
precedence left     MAS, MENOS;
precedence left     MULT, DIVID, PORCENT;
precedence nonassoc CAST; 
precedence nonassoc MENOSUNARIO, MASMAS, MENOSMENOS;


/*gramatica */

Lista_de_sent ::= Sentencia:s
                    {:
                        Bloque b=new Bloque(PLXC.lex.getLine());
                        b.add(s);
                        RESULT=b;
                    :}
                | Lista_de_sent:l Sentencia:s
                    {:
                        l.add(s);
                        RESULT=l;    
                    :}
                ;

Sentencia ::=   List_declar_var:l PCOMA {:RESULT = l;:}
                | Expresion:e PCOMA     {:RESULT = e;:}
                | IF AP Expresion:c CP Sentencia:sT {:RESULT = new SentIF(PLXC.lex.getLine(),c,sT,null);:}
                | IF AP Expresion:c CP Sentencia:sT ELSE Sentencia:sF {:RESULT = new SentIF(PLXC.lex.getLine(),c,sT,sF);:}
                | WHILE AP Expresion:c CP Sentencia:s {:RESULT = new SentWHILE(PLXC.lex.getLine(),c,s);:}
                | DO Sentencia:s WHILE AP Expresion:c CP PCOMA {:RESULT = new SentDOWHILE(PLXC.lex.getLine(),c,s);:}
                | FOR Inicio_bloque:b AP Inicio_forc:i PCOMA Cond_forc:c PCOMA Act_forc:a CP Sentencia:s
                {:
                    //tabla.borrarBloque(bloqueActual);
                    bloqueActual=b;
                    RESULT = new SentFORC(PLXC.lex.getLine(),c,a,s);
                :}
                | PRINT AP Expresion:e CP PCOMA //habra que ver si llevarnoslo a  expresion y return void
                {:RESULT = new LlamadaMetodo(PLXC.lex.getLine(),e,Metodos.IMPRIMIR,null);:}
                | A_LLAVE Inicio_bloque:b Lista_de_sent:l C_LLAVE 
                    {: 
                        //hay que eliminar las variables de ese bloque, de la tabla, y volver al bloque anterior
                        //tabla.borrarBloque(bloqueActual);
                        bloqueActual = b; //con esto vuelvo al bloque anterior
                        RESULT=l;
                        
                    :}
                |A_LLAVE C_LLAVE 
      ;
// Es la inst de no hacer nada, habra q devolver algo q no sea null
//for de pascal |FOR Var_for:v ASIGNA Expresion:ei Direccion_for:d Expresion:ef  //CP paso Sentencia
//para pascal las reglas de:  var_for Paso y el Direcciones_for 
/*
Paso ::= STEP Expresion
            | 
            ;

Direccion_for ::= TO
                | DOWNTO
                ;

Var_for ::=  IDENT:i
            ;
*/
            
Inicio_bloque ::=    {: 
                        RESULT = bloqueActual; //Guardo el bloque en el que estaba
                        cBloque++;
                        bloqueActual = cBloque; //a lo mejor hay que comentarlo
                    :}
                ;                    

Inicio_forc ::=  List_declar_var:l {:RESULT=l;:}
            | Expresion:e           {:RESULT=e;:}
            |                       {:RESULT=null;:}
            ;

Cond_forc ::=  Expresion:e           {:RESULT=e;:}
            |                        {:RESULT=null;:}
            ;

Act_forc ::=  Expresion:e           {:RESULT=e;:}
            |                       {:RESULT=null;:}
            ;
         
Else_if ::= ELSE Sentencia
            | PCOMA
            ;

List_declar_var ::= ExpTipo:t IDENT:i 
                        {:
                            tabla.declararVariable(PLXC.lex.getLine(), i, bloqueActual, true, t);
                            RESULT = new ListaVar(PLXC.lex.getLine(), t);
                        :}

                    |ExpTipo:t IDENT:i AC ENTERO:e CC 

                    |ExpTipo:t IDENT:i ASIGNA Expresion:e
                        {:  
                            Variable v = tabla.declararVariable(PLXC.lex.getLine(),i, bloqueActual, true, t);
                            ListaVar l = new ListaVar(PLXC.lex.getLine(), t);
                            l.add(new LlamadaMetodo(PLXC.lex.getLine(),
                                        new ExpVariable(PLXC.lex.getLine(), v),
                                        Metodos.CONSTRUCTORCOPIA,
                                        new Instruccion []{e}));

                            RESULT=l;
                        :}
                    |ExpTipo:t IDENT:i AC ENTERO:e CC ASIGNA Array:a

                    |List_declar_var:l COMA IDENT:i
                        {:tabla.declararVariable(PLXC.lex.getLine(),i,bloqueActual,true,l.getTipo());
                            RESULT=l;:}

                    |List_declar_var:t COMA IDENT:i AC ENTERO:e CC

                    |List_declar_var:l COMA IDENT:i ASIGNA Expresion:e
                        {:
                            Variable v = tabla.declararVariable(PLXC.lex.getLine(),i, bloqueActual, true, l.getTipo());
                            l.add(new LlamadaMetodo(PLXC.lex.getLine(),
                                            new ExpVariable(PLXC.lex.getLine(), v),
                                            Metodos.CONSTRUCTORCOPIA,
                                            new Instruccion []{e}));
                            RESULT=l;
                        :}
                    |List_declar_var:t COMA IDENT:i AC ENTERO:e CC ASIGNA Array:a
                    ;

Array ::= IDENT
        | A_LLAVE Lista_exp:e C_LLAVE
        ;

Lista_exp ::= Expresion:e
        |Lista_exp:l COMA Expresion:e 
        ;

//para reconocer los tipos de datos
ExpTipo ::= INT     {:RESULT = TipoInt.instancia;:}
        |CHAR       {:RESULT = TipoChar.instancia;:}
        |FLOAT      {:RESULT = TipoReal.instancia;:}
        ;

Expresion ::= Literal:l {: RESULT = new ExpLiteral(PLXC.lex.getLine(), l);:}

            |IDENT:i    {: Objeto o = tabla.buscarObjeto(i); 
                        if ((o == null)||!(o instanceof Variable)){ 
                            throw new ParseException("Variable ("+i+") no definida", PLXC.lex.getLine());
                        } 
                            RESULT = new ExpVariable(PLXC.lex.getLine(), (Variable) o);:}

            |Expresion:e1 ASIGNA Expresion:e2
                {:
                RESULT=new LlamadaMetodo(PLXC.lex.getLine(),
                                        e1,
                                        Metodos.ASIGNA,
                                        new Instruccion[]{e2});
                
                :}
             |   IDENT:i ASIGNA Expresion:e
                {:
                    Objeto obj = tabla.buscarObjeto(i);

                    if(obj == null) {
                        throw new ParseException("Variable <" + i + "> no ha sido declarada", PLXC.lex.getLine());
                    }
                    RESULT = new LlamadaMetodo(
                        PLXC.lex.getLine(),
                        new ExpVariable(PLXC.lex.getLine(), (Variable) obj),
                        Metodos.ASIGNA,
                        new Instruccion[]{e}
                );
            :}
            
            |Expresion:e1 OLOG Expresion:e2  {: RESULT = new CortoCircuito(PLXC.lex.getLine(), e1, Metodos.OLOG,  e2);:}

            |Expresion:e1 YLOG Expresion:e2  {: RESULT = new CortoCircuito(PLXC.lex.getLine(), e1, Metodos.YLOG,  e2);:}

            |Expresion:e1 OperadorR:o Expresion:e2 {: RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e1, o, new Instruccion[]{e2});:}%prec IGUAL

            |Expresion:e1 OperadorA:o Expresion:e2 {: RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e1, o, new Instruccion[]{e2});:}%prec MAS

            |Expresion:e1 OperadorM:o Expresion:e2 {: RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e1, o, new Instruccion[]{e2});:}%prec MULT

            |OperadorU:o Expresion:e {: RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e, o, null);:} %prec MENOSUNARIO

            |Expresion:e OperadorUPost:op
                    {:
                        RESULT = new CopiaYLlama(PLXC.lex.getLine(), e , op, null);
                    :} %prec MASMAS
            |AP Expresion:e CP {:RESULT = e;:}

            //|Expresion:i MASMAS lo mimo  pero con CopiaYllamadametodo

            //|Expresion:i MENOSMENOS

            |AP ExpTipo:t CP Expresion:e {: var et = new ExpTipo (PLXC.lex.getLine(), t); RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e, Metodos.CAST,  new Instruccion[]{et});:} %prec CAST
            ;

OperadorL ::= YLOG       {: RESULT= Metodos.YLOG; :}
            | OLOG       {: RESULT= Metodos.OLOG; :}
            ;

Literal ::= ENTERO:e {:RESULT = new Literal (bloqueActual, TipoInt.instancia, e);:}
        | CARACTER:c {:RESULT = new Literal (bloqueActual, TipoInt.instancia, c);:}
        | REAL:r     {:RESULT = new Literal (bloqueActual, TipoInt.instancia, r);:}
        ;

OperadorR  ::= IGUAL     {: RESULT= Metodos.IGUAL; :}
            |DIFERENTE  {: RESULT= Metodos.DIFERENTE; :}
            |MENOR      {: RESULT= Metodos.MENOR; :}
            |MENORIG    {: RESULT= Metodos.MENORIG; :}
            |MAYOR      {: RESULT= Metodos.MAYOR; :}
            |MAYORIG    {: RESULT= Metodos.MAYORIG; :}
            ;

OperadorA ::= MAS {:RESULT= Metodos.SUMA; :}
            |MENOS {:RESULT= Metodos.RESTA;:} 
    ;
OperadorM::= MULT {:RESULT= Metodos.MULT; :}
            |DIVID {:RESULT= Metodos.DIVID;:} 
            |PORCENT {:RESULT= Metodos.RESTO;:}
            ;
OperadorU::= MASMAS {:RESULT= Metodos.SIGUIENTE; :}
            |MENOSMENOS {:RESULT= Metodos.ANTERIOR;:} 
            |VIRGU
            |MENOS {:RESULT= Metodos.OPUESTO;:}
            ;

OperadorUPost::= MASMAS {:RESULT=Metodos.SIGUIENTE;:}
               |MENOSMENOS   {: RESULT = Metodos.ANTERIOR; :}
;



//ej.plx codigo fuente
//MiCompilador genera un ej.ctd
//ctd es el que transforma mi ej.ctd , genera una salida
//dicha salida tiene que generar lo mismo que el plxc(compilador) del profesor con ctd.


//  le falta de arrays al rpofesor por implementar:
//    int a[3] = {1,2,3};
//    a = {3,4,5};
